"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в
виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import random
import timeit


# Возьмем и доработаем Ваш алгоритм
def bubble_sort_revers(lst_obj):
    n = 1
    while n < len(lst_obj):
        sort_flag = False  # флаг того что сортировка была осуществлена
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                sort_flag = True  # Перестановка была осуществлена
        if not sort_flag:  # если за проход небыло ни одной перестановки, значит массив отсортирован
            # print(f"Сортировка завершена досрочно. Я закончил на {n} шаге из {len(lst_obj)}.")
            break
        n += 1
    return lst_obj


# оригинальная версия
def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] > lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


if __name__ == "__main__":
    orig_list = [random.randint(-100, 100) for _ in range(20)]
    print("Original:")
    print(timeit.timeit(
            "bubble_sort(orig_list[:])",
            globals=globals(),
            number=100_000))

    print("Modify:")
    print(timeit.timeit(
            "bubble_sort_revers(orig_list[:])",
            globals=globals(),
            number=100_000))

    # проверка
    print(bubble_sort_revers(orig_list))

    """
    Original: 1.9227856389998124
    Modify: 1.6525448459997278
    [87, 86, 73, 49, -18, -20, -42, -42, -62, -62, -71, -72, -74, -76, -77, -79, -82, -84, -87, -97]
    Запускал множество раз. У модифицированной версии минимальные выйгрыши по скорости, а иногда и нет вовсе.
    Так что считаю данную доработку не крайней необходимостью.
    Значительный выйгрыш будет только в том случае, если нам повезет,
    и массив будет уже заранее практически отсортирован
    или отсортирован полностью, и мы закончим сортировку еще на первых итерациях цикла сортировки.
    """
