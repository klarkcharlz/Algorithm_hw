"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Решите чеcountрез рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def odd_and_even(n, odd=0, even=0):
    odd = odd
    even = even
    if n == 0:
        return [even, odd]
    else:
        if n % 2 == 0:
            even += 1
        else:
            odd += 1
        return odd_and_even(n // 10, odd, even)


def natural_number():
    try:
        num = int(input("Пожалуйста введите натуральное число: \n"))
        if num < 0:
            raise ValueError
    except ValueError:
        print("Вы ввели не натуральное число! Пожалуйста повторите.")
        natural_number()
    else:
        return num


if __name__ == "__main__":
    n = natural_number()
    print(f"Количество четных и нечетных цифр в числе равно: {odd_and_even(n)}.")
